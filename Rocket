#!/usr/bin/env python3

#   Rocket
#
#   Joe Gibson (gibsjose@mail.gvsu.edu)
#
#   17 August 2015
#
#   http://gibsjose.com
#   http://github.com/gibsjose/Rocket

# Essentials
from enum import Enum
from glob import glob
import sys, os, traceback, optparse
import re
import operator
import time
import datetime
import fileinput

# JSON and Pretty Print
import json
from pprint import pprint

# File Copying, `which()`, etc.
import shutil

# Call shell commands for `git`
from subprocess import call

class Language(Enum):
    """
    Defines the available languages as enumerated types
    """
    unknown = 0
    c = 1
    cpp = 2
    avr_c = 3
    avr_cpp = 4
    python = 5

# Global language dictionary
LanguageDictionary = {
    'c': Language.c,
    'cpp': Language.cpp,
    'c++': Language.cpp,
    'avr-c': Language.avr_c,
    'avr-cpp': Language.avr_cpp,
    'avr-c++': Language.avr_cpp,
    'python': Language.python
}

# Matches language names with their template directory name
LanguageNameDictionary = {
    'c': 'c',
    'cpp': 'cpp',
    'c++': 'cpp',
    'avr-c': 'avr-c',
    'avr-cpp': 'avr-cpp',
    'avr-c++': 'avr-cpp',
    'python': 'python'
}

class Configuration:
    def __init__(self):
        """
        Defines the Rocket Configuration object
        """
        self.data = []

    def Modify(self, in_file, out_file, language_string):
        """
        Read in the JSON `in_file`, modify the language attribute, and write it out as the JSON `out_file`
        """
        with open(in_file, encoding='utf-8') as in_fp:
            # Load JSON data
            self.data = json.loads(in_fp.read())

            # Modify language string
            self.data["language"] = language_string

        with open(out_file, 'w', encoding='utf-8') as out_fp:
            # Write JSON data
            json.dump(self.data, out_fp, sort_keys=True, indent=4)

    def Encode(self, filepath):
        """
        Encode the configuration data as a JSON file
        """
        with open(filepath, 'w', encoding='utf-8') as config_file:
            json.dump(self.data, config_file, sort_keys=True, indent=4)

    def Decode(self, filepath):
        """
        Decode the configuration file as a Python JSON object (dictionary)
        """
        # Get current date in `DD MONTH YYYY` format
        today = datetime.date.today()
        self.date = today.strftime('%d %b %Y')

        # @TODO Issue exception if file does not exist

        # @TODO Raise exceptions or default (with message) if required JSON objects do not exist
        # Read config JSON data
        with open(filepath, encoding='utf-8') as config_file:
            # Load JSON data
            self.data = json.loads(config_file.read())

            # Language (string)
            if 'language' not in self.data:
                raise Exception('Must specify \'language\' in config file')

            self.language_string = self.data['language']

            # Language (enum)
            lang = self.language_string.lower()
            if lang in LanguageDictionary:
                self.language = LanguageDictionary[lang]
            else:
                self.language = Language.unknown
                raise Exception('Unknown language')

            # Project name
            if 'project' not in self.data:
                raise Exception('Must specify \'project\' in config file')
            self.project = self.data['project']

            # Authors
            if 'authors' not in self.data:
                raise Exception('Must specify at least one author under \'authors\' in config file')
            self.authors = self.data['authors']

            for author in self.authors:
                if 'name' not in author:
                    raise Exception('Authors must have \'name\' attribute')

            # Websites
            if 'websites' in self.data:
                self.websites = self.data['websites']
            else:
                self.website = []

            # License
            if 'license' in self.data:
                self.license = self.data['license']
            else:
                self.license = 'None'

            # Git
            if 'git' in self.data:
                self.git = self.data['git']
            else:
                self.git = False

            # GitHub
            if 'github create' in self.data:
                self.github_create = self.data['github create']
            else:
                self.github_create = False

            if 'github remote' in self.data:
                self.github_remote = self.data['github remote']
            else:
                self.github_remote = 'None'

            if 'github user' in self.data:
                self.github_user = self.data['github user']
            else:
                self.github_user = 'None'

    def Print(self):
        print('Project: ' + self.project)
        print('Language: ' + self.language_string)
        print('Date: ' + self.date)
        print('License: ' + self.license)
        print('Author(s):')
        for author in self.authors:
            print('\t' + author['name'], end='')
            if 'email' in author:
                print(': ' + author['email'])
            else:
                print('')
        print('Website(s):')
        if len(self.websites) == 0:
            print('\t None')
        else:
            for website in self.websites:
                print('\t' + website)
        print('Git: ' + str(self.git))
        print('Create GitHub Repo: ' + str(self.github_create))
        print('GitHub Remote: ' + self.github_remote)
        print('GitHub User: ' + self.github_user)

class Rocket:
    """
    Defines the Rocket object for creating project/code templates
    """
    def __init__(self):
        """
        Rocket default constructor
        """
        self.language = Language.unknown

    def Generate(self, language):
        """
        Generates the skeleton code, makefiles (if necessary), gitignore
        files, etc. and generates a default `config.json` object with the correct language
        """
        # Set language
        # - 'language' is the user's raw input
        # - 'lang' is a lowercase version of 'language'
        # - 'self.language' is the actual language type enum (e.g. Language.cpp)
        # - 'language_name' is the accepted language name by Rocket (e.g. 'C++' turn to 'cpp')
        lang = language.lower()
        if lang in LanguageDictionary:
            self.language = LanguageDictionary[lang]
            language_name = LanguageNameDictionary[lang]
        else:
            self.language = Language.unknown
            language_name = 'unknown'
            raise Exception('Unknown language')

        # @TODO Decide on using 'which()' method or the 'os.path.dirname()' method
        # Get the Rocket executable directory, which contains the templates
        # rocket_directory = shutil.which('Rocket')
        # if not rocket_directory:
        #     raise Exception('Rocket executable path could not be found: Check your installation!')
        rocket_directory = os.path.dirname(os.path.realpath(sys.argv[0]))
        print('\t> Copying from Rocket directory: ' + rocket_directory)

        # Pull correct files and copy them to local directory
        directory = os.getcwd()
        print('\t> Current directory: ' + directory)

        # Write a default `config.json` file with the correct language
        # Read in the default file, change the language attribute, and write it
        self.configuration = Configuration()
        self.configuration.Modify(rocket_directory + '/config.json', directory + '/config.json', language_name)
        print('\t> Created default ' + language + 'configuration file \'./config.json\'')

        # Make directories and copy files as needed for specific languages
        if (self.language == Language.c) or (self.language == Language.cpp) or (self.language == Language.avr_c) or (self.language == Language.avr_cpp):
            # Create necessary directories
            if not os.path.exists(directory + '/src/'):
                os.makedirs(directory + '/src/')
                print('\t> Created source directory \'./src/\'')

            # Copy the skeleton code
            if (self.language == Language.c) or (self.language == Language.avr_c):
                shutil.copy(rocket_directory + '/languages/' + language_name + '/skeleton/rocket.c', directory + '/src/')
                shutil.copy(rocket_directory + '/languages/' + language_name + '/skeleton/rocket.h', directory + '/src/')
                print('\t> Created skeleton \'.c\' and \'.h\' files in \'./src/\'')
            else:
                shutil.copy(rocket_directory + '/languages/' + language_name + '/skeleton/rocket.cpp', directory + '/src/')
                shutil.copy(rocket_directory + '/languages/' + language_name + '/skeleton/rocket.h', directory + '/src/')
                print('\t> Created skeleton \'.cpp\' and \'.h\' files in \'./src/\'')

            # Copy the makefile
            shutil.copy(rocket_directory + '/languages/' + language_name + '/makefile', directory)
            print('\t> Created ' + language + ' \'./makefile\'')

    def Config(self):
        """
        Pull from the generated and (maybe) edited `config.json` file, and
        make changes to comment header blocks
        """
        # Create a configuration object
        self.configuration = Configuration()

        # Decode the configuration object
        self.configuration.Decode(os.getcwd() + '/config.json')

        if self.configuration.language_string in LanguageNameDictionary:
            language_name = LanguageNameDictionary[self.configuration.language_string]
        else:
            language_name = 'unknown'

        print('\t> Generated date: ' + self.configuration.date)
        print('\t> Detected language: ' + self.configuration.language_string)
        print('\t> Detected project name: ' + self.configuration.project)

        # Modify skeleton files/makefiles with data from `config.json`
        rocket_directory = os.path.dirname(os.path.realpath(sys.argv[0]))
        directory = os.getcwd()

        # Rename skeleton code files to project name

        # Modify skeleton code
        if self.configuration.language == Language.c:
            # @TODO Look here instead of using `fileinput`: https://stackoverflow.com/questions/10818812/python-writing-to-file-using-stdout-and-fileinput
            # for line in fileinput.input(directory + '/src/rocket.c', inplace=True):
            #     # {TITLE}
            #     print(line.replace('\{TITLE\}', self.configuration.project), end='')
            #
            #     # {AUTHORS}
            #     first_author = self.configuration.authors[0]
            #     auth = first_author['name'];
            #     if 'email' in first_author:
            #         auth += ' (' + first_author['email'] + ')'
            #
            #     if len(self.configuration.authors) > 1:
            #         auth_iter = iter(self.configuration.authors)
            #         next(auth_iter)
            #         for author in auth_iter:
            #             auth += '\n*\t' + author['name']
            #             if 'email' in author:
            #                 auth += ' (' + author['email'] + ')'
            #
            #     print(line.replace('\{AUTHORS\}', auth), end='')
            #
            #     # {DD MONTH YYYY}
            #     print(line.replace('\{DD MONTH YYYY\}', self.configuration.date), end='')
            #
            #     # {WEBSITES}
            #     if len(self.configurations.websites) > 0:
            #         webs = self.configuration.websites[0]
            #         webs_iter = iter(self.configuration.websites)
            #         next(webs_iter)
            #         for website in webs_iter:
            #             webs += '\n*\t' + website
            #
            #     print(line.replace('\{WEBSITES\}', webs), end='')

            print('\t> Updated ./src/rocket.c')

        # If project will be a `git` repo add `.gitignore` and `README.md`
        if self.configuration.git:
            # Create README
            with open(directory + '/README.md', 'w') as readme:
                readme.write('# ' + self.configuration.project + '\n')
                readme.write(self.configuration.date + '\n')

            # Copy the `.gitignore`
            shutil.copy(rocket_directory + '/languages/' + language_name + '/' + language_name + '.gitignore', directory + '/.gitignore')
            print('\tCreated ' + self.configuration.language_string + ' \'./.gitignore\'')

            # Run `git init`
            call("git init", shell=True)

        # # @TODO
        # # If project includes a GitHub account, either add or create remote
        # if self.configuration.github_create:
        #     # Create GitHub account using `hub`, if installed

    def Clear(self):
        """
        Remove generated project files in the current directory
        """
        rocket_directory = os.path.dirname(os.path.realpath(sys.argv[0]))
        directory = os.getcwd()

        # Make sure user knows exactly which directory they are in
        response = input('Remove all project files in \'' + directory + '\'? [Y/n]: ')
        if not response == 'Y':
            return 1

        # Have at least *some* sanity check...
        if directory == rocket_directory:
            raise Exception('Removing here would remove Rocket\'s files...')
        elif directory == '/':
            raise Exception('You do not really want to remove \'' + directory + '\', right...?')
        elif directory == '/usr':
            raise Exception('You do not really want to remove \'' + directory + '\', right...?')
        elif directory == os.path.expanduser('~'):
            raise Exception('You do not really want to remove \'' + directory + '\', right...?')

        # Can use the `config.json` to more intelligently remove files if it exists
        if os.path.exists(directory + '/config.json'):
            configuration = Configuration()
            configuration.Decode(directory + '/config.json')
            configuration.Print()

        # Else do blind removal of *.py, config.json, makefile, .gitignore, ./.git/, ./src/, ./obj/, ./bin/, {Executable}, etc.
        # else:
        #     os.remove(glob(directory + '/*.py'))
        #     os.remove(directory + '/config.json')
        #     os.remove(directory + '/makefile')
        #     os.remove(directory + '/.gitignore')
        #     shutil.rmtree(directory + '/.git/')
        #     shutil.rmtree(directory + '/src/')
        #     shutil.rmtree(directory + '/obj/')
        #     shutil.rmtree(directory + '/bin/')

        return 0

    def Print(self):
        """
        Prints the configuration data in a nice format
        """
        self.configuration.Print()

def main():
    """
    Rocket main
    """
    global options, args

    print('-------')
    print('Rocket!')
    print('-------')

    if options.verbose:
        print('OPTIONS')
        print('-------')
        if options.language:
            print('\tLanguage: ' + options.language)

        if options.config:
            print('\tConfiguring with \'config.json\'')

    if options.remove:
        directory = os.getcwd()
        print('\n>>> Removing existing project files >>>')
        rocket = Rocket()
        if not rocket.Clear():
            print('<<< Project files removed <<<')

    elif options.language:
        rocket = Rocket()
        print('\n>>> Generating a blank ' + options.language + ' project >>>')
        rocket.Generate(options.language)
        print('<<< Generated skeleton ' + options.language + ' project <<<')
        print('<<< Edit the \'./config.json\' file with your project settings and run \'Rocket -c\' to finish <<<')

    elif options.config:
        rocket = Rocket()
        print('\n>>> Configuring the project >>>')
        rocket.Config()
        print('<<< Configured \'' + rocket.configuration.project + '\' <<<')

        rocket.Print()

    else:
        raise Exception('Must specify language with \'-l LANGUAGE\' or run config with \'-c\' or \'--config\'')

if __name__ == '__main__':
    try:
        start_time = time.time()
        parser = optparse.OptionParser(formatter=optparse.TitledHelpFormatter(), usage=globals()['__doc__'], version='0.1.0')

        parser.add_option('-l', '--language', action='store', type='string', dest='language', help='language')

        parser.add_option('-c', '--config', action='store_true', default=False, help='Configure project using config.json file')

        parser.add_option('-r', '--remove', action='store_true', default=False, help='Remove all project files if they exist')

        parser.add_option('-v', '--verbose', action='store_true', default=False, help='verbose mode')

        (options, args) = parser.parse_args()

        main()
        if options.verbose: print('\n' + time.asctime())
        if options.verbose: print('Total Runtime: ', end='')
        if options.verbose: print(str((time.time() - start_time) * 1000) + ' ms')
        sys.exit(0)
    except KeyboardInterrupt as e: # Ctrl-C
        raise e
    except SystemExit as e: # sys.exit()
        raise e
    except Exception as e:
        print('\n<-- Exception: ', end='')
        print(str(e), end=' -->\n\n')
        if(options.verbose):
            traceback.print_exc()

        os._exit(1)
