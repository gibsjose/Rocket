#!/usr/bin/env python3

#   Rocket
#
#   Joe Gibson (gibsjose@mail.gvsu.edu)
#
#   17 August 2015
#
#   http://gibsjose.com
#   http://github.com/gibsjose/Rocket

from enum import Enum
import sys, os, traceback, optparse
import re
import operator
import time
import datetime

# JSON Ready and Pretty Print
import json
from pprint import pprint

def main ():
    global options, args

    if options.verbose:
        print('OPTIONS')
        print('-------')
        if options.config:
            print('\tConfig file: ' + options.config)
        if options.language:
            print('\tLanguage: ' + options.language)

    # Get current date in `DD MONTH YYYY` format
    today = datetime.date.today()
    date = today.strftime('%d %b %Y')

    # Show config data
    if options.config:
        with open(options.config, encoding='utf-8') as config_file:
            data = json.loads(config_file.read())

        # Print raw JSON data
        # pprint(data)
        # print('')

        # Parse and Print data manually
        print('Project: ' + data["project"])

        print('Date: ' + date)

        for author in data["authors"]:
            print('Author: ' + author["name"] + ' Email: ' + author["email"])

        for website in data["websites"]:
            print('Website: ' + website)

        print('License: ' + data["license"])

    print('\n\nRocket!')

if __name__ == '__main__':
    try:
        start_time = time.time()
        parser = optparse.OptionParser(formatter=optparse.TitledHelpFormatter(), usage=globals()['__doc__'], version='0.1.0')

        parser.add_option('-c', '--config', action='store', type='string', dest='config', help='JSON config file')

        parser.add_option('-l', '--language', action='store', type='string', dest='language', help='language')

        parser.add_option('-v', '--verbose', action='store_true', default=False, help='verbose mode')

        (options, args) = parser.parse_args()

        # if not options.file:
        #     parser.error('missing argument: -f FILE')

        main()
        if options.verbose: print('\n' + time.asctime())
        if options.verbose: print('Total Runtime: ', end='')
        if options.verbose: print(str((time.time() - start_time) * 1000) + ' ms')
        sys.exit(0)
    except KeyboardInterrupt as e: # Ctrl-C
        raise e
    except SystemExit as e: # sys.exit()
        raise e
    except Exception as e:
        print('Error: Unexpected Exception')
        print(str(e))
        traceback.print_exc()
        os._exit(1)
