#!/usr/bin/env python3

#   Rocket
#
#   Joe Gibson (gibsjose@mail.gvsu.edu)
#
#   17 August 2015
#
#   http://gibsjose.com
#   http://github.com/gibsjose/Rocket

# @TODO Look into using inflection library for camel-case, etc. https://inflection.readthedocs.org/en/latest/
# @TODO Make the `extension` attribute for Python have a local override in `config.json` to more easily decide on using `.py` extension
# @TODO Add `{AUTHOR-NAME}` and `{AUTHOR-EMAIL}` tags instead of just `{AUTHOR}` to more easily customize the comments
# @TODO FIX: When there are no `websites` or `license` specified, there is an extra line in the comment header...

# Essentials
from enum import Enum
from glob import glob
import sys
import os
import traceback
import argparse
import re
import operator
import time
import datetime
import tempfile
import stat

# JSON and Pretty Print
import json
from pprint import pprint

# File Copying, `which()`, etc.
import shutil

# Call shell commands for `git`
import subprocess

class Language(Enum):
    """
    Defines the available languages as enumerated types
    """
    unknown = 0
    c = 1
    cpp = 2
    avr_c = 3
    avr_cpp = 4
    python = 5

# Global language dictionary
LanguageDictionary = {
    'c': Language.c,
    'cpp': Language.cpp,
    'c++': Language.cpp,
    'avr-c': Language.avr_c,
    'avr-cpp': Language.avr_cpp,
    'avr-c++': Language.avr_cpp,
    'python': Language.python
}

# Matches language names with their template directory name
LanguageNameDictionary = {
    'c': 'c',
    'cpp': 'cpp',
    'c++': 'cpp',
    'avr-c': 'avr-c',
    'avr-cpp': 'avr-cpp',
    'avr-c++': 'avr-cpp',
    'python': 'python'
}

class LanguageConfiguration:
    """
    Language Configuration from a `language.json` file
    """
    def __init__(self):
        """
        Default constructor
        """
        self.data = {}
        self.exists = False
        self.naming = None
        self.sources = []
        self.extension = True

    def Decode(self, filepath):
        """
        Try to read in and parse language config file
        """
        if os.path.exists(filepath):
            self.exists = True

            # Read language JSON data
            with open(filepath, encoding='utf-8') as lang_file:
                # Load JSON data
                self.data = json.loads(lang_file.read())

                # Naming
                if 'naming' in self.data:
                    self.naming = self.data['naming'].replace(' ', '-').lower()
                else:
                    self.naming = None

                # Sources
                if 'sources' in self.data:
                    self.sources = self.data['sources']
                else:
                    self.sources = []

                # extension
                if 'extension' in self.data:
                    self.extension = self.data['extension']
                else:
                    self.extension = True

        else:
            self.exists = False
            self.naming = None
            self.sources = []
            self.extension = True

class Configuration:
    def __init__(self):
        """
        Default constructor
        """
        self.data = {}

    def Modify(self, in_file, out_file, language_string, project):
        """
        Read in the JSON `in_file`, modify the language and project attributes, and write it out as the JSON `out_file`
        """
        # Check if config file exists
        if not os.path.exists(in_file):
            raise Exception('Configuration file does not exist at ' + in_file)

        with open(in_file, encoding='utf-8') as in_fp:
            # Load JSON data
            self.data = json.loads(in_fp.read())

            # Modify language string
            self.data['language'] = language_string

            # Modify project string
            self.data['project'] = project

        with open(out_file, 'w', encoding='utf-8') as out_fp:
            # Write JSON data
            json.dump(self.data, out_fp, sort_keys=True, indent=4)

    def Encode(self, filepath):
        """
        Encode the configuration data as a JSON file
        """
        with open(filepath, 'w', encoding='utf-8') as config_file:
            json.dump(self.data, config_file, sort_keys=True, indent=4)

    def Decode(self, filepath):
        """
        Decode the configuration file as a Python JSON object (dictionary)
        """
        # Get current date in `DD MONTH YYYY` format
        today = datetime.date.today()
        self.date = today.strftime('%d %b %Y')

        # Check if config file exists
        if not os.path.exists(filepath):
            raise Exception('Configuration file does not exist at ' + filepath)

        # Read config JSON data
        with open(filepath, encoding='utf-8') as config_file:
            # Load JSON data
            self.data = json.loads(config_file.read())

            # Language (string)
            if 'language' not in self.data:
                raise Exception('Must specify \'language\' in config file')

            self.language_string = self.data['language']

            # Language (enum)
            lang = self.language_string.lower()
            if lang in LanguageDictionary:
                self.language = LanguageDictionary[lang]
            else:
                self.language = Language.unknown
                raise Exception('Unknown language')

            # Language (official name)
            self.language_name = LanguageNameDictionary[self.language_string]

            # Project name
            if 'project' not in self.data:
                raise Exception('Must specify \'project\' in config file')
            self.project = self.data['project']

            # Authors
            if 'authors' not in self.data:
                raise Exception('Must specify at least one author under \'authors\' in config file')
            self.authors = self.data['authors']

            for author in self.authors:
                if 'name' not in author:
                    raise Exception('Authors must have \'name\' attribute')

            # Websites
            if 'websites' in self.data:
                self.websites = self.data['websites']
            else:
                self.website = []

            # License
            if 'license' in self.data:
                self.license = self.data['license']
            else:
                self.license = None

            # License URL
            if 'license-url' in self.data:
                self.license_url = self.data['license-url']
            else:
                self.license_url = None

            # Git
            if 'git' in self.data:
                self.git = self.data['git']
            else:
                self.git = False

            # GitHub
            if 'git-push' in self.data:
                self.git_push = self.data['git-push']
            else:
                self.git_push = None

            if 'git-remote' in self.data:
                self.git_remote = self.data['git-remote']
            else:
                self.git_remote = None

    def Print(self):
        print('Project: ' + self.project)
        print('Language: ' + self.language_string)
        print('Date: ' + self.date)
        print('License: ' + self.license)
        print('Author(s):')
        for author in self.authors:
            print('\t' + author['name'], end='')
            if 'email' in author:
                print(': ' + author['email'])
            else:
                print('')
        print('Website(s):')
        if len(self.websites) == 0:
            print('\t None')
        else:
            for website in self.websites:
                print('\t' + website)
        print('Git: ' + str(self.git))
        print('Create GitHub Repo: ' + str(self.git_create))
        print('GitHub Remote: ' + self.git_remote)
        print('GitHub User: ' + self.git_user)

class CommentFiller:
    """
    Replaces comment blocks in files with the appropriate data
    """
    def __init__(self, configuration):
        """
        Sets configuration values
        """
        self.configuration = configuration

    def Replace(self, files):
        """
        Intelligently replace comments in files based on language type
        """
        self.files = files

        for f in self.files:
            self.ReplaceInFile(f)

    def ReplaceInFile(self, filepath):
        """
        Replace the comment tags with actual data in a source file
        """
        if not os.path.exists(filepath):
            raise Exception('Cannot modify \'' + filepath + '\': Does not exist')

        #Create temp file
        fh, abs_path = tempfile.mkstemp()
        with open(abs_path,'w') as new_file:
            with open(filepath) as old_file:
                # Get header file name
                for f in self.files:
                    regex = re.compile(r'^.+\.h$')
                    if regex.match(f):
                        header = os.path.basename(f)

                for line in old_file:
                    # {TITLE}
                    if '{TITLE}' in line:
                        new_file.write(line.replace('{TITLE}', self.configuration.project))

                    # {DD MONTH YYYY}
                    elif '{DD MONTH YYYY}' in line:
                        new_file.write(line.replace('{DD MONTH YYYY}', self.configuration.date))

                    # {LICENSE}
                    elif '{LICENSE}' in line:
                        license = 'License: '

                        if self.configuration.license:
                            if not self.configuration.license_url:
                                license += self.configuration.license
                            else:
                                license += self.configuration.license + ' ('

                        if self.configuration.license_url:
                            if not self.configuration.license:
                                license += self.configuration.license_url
                            else:
                                license += self.configuration.license_url + ')'

                        if self.configuration.license or self.configuration.license_url:
                            new_file.write(line.replace('{LICENSE}', license))

                    # {AUTHORS}
                    elif '{AUTHORS}' in line:
                        first_author = self.configuration.authors[0]
                        auth = first_author['name'];
                        if 'email' in first_author:
                            auth += ' (' + first_author['email'] + ')'

                        new_file.write(line.replace('{AUTHORS}', auth))

                        if len(self.configuration.authors) > 1:
                            auth_iter = iter(self.configuration.authors)
                            next(auth_iter)
                            for author in auth_iter:
                                auth = author['name']
                                if 'email' in author:
                                    auth += ' (' + author['email'] + ')'

                                if self.configuration.language == Language.python:
                                    new_file.write('#\t' + auth + '\n')
                                else:
                                    new_file.write('*\t' + auth + '\n')

                    # {WEBSITES}
                    elif '{WEBSITES}' in line:
                        if len(self.configuration.websites) > 0:
                            new_file.write(line.replace('{WEBSITES}', self.configuration.websites[0]))

                            webs_iter = iter(self.configuration.websites)
                            next(webs_iter)
                            for website in webs_iter:
                                if self.configuration.language == Language.python:
                                    new_file.write('#\t' + website + '\n')
                                else:
                                    new_file.write('*\t' + website + '\n')

                    # Header guards
                    elif '{GUARD}' in line:
                        guard = self.configuration.project.replace(' ', '_').upper() + '_H'
                        new_file.write(line.replace('{GUARD}', guard))

                    # Includes
                    elif '{HEADER}' in line:
                        new_file.write(line.replace('{HEADER}', header))

                    else:
                        new_file.write(line)

        # Close file
        os.close(fh)

        #Remove original file
        os.remove(filepath)

        #Move new file
        shutil.move(abs_path, filepath)

        print('\t> Configured ' + os.path.basename(filepath))

class MakefileFiller:
    """
    Replaces items in makefiles with appropriate data
    """
    def __init__(self, configuration):
        """
        Sets configuration values
        """
        self.configuration = configuration

    def Replace(self, filepath, binary):
        """
        Replace the makefile variables with actual data
        """
        if self.configuration.language == Language.python:
            return

        if not os.path.exists(filepath):
            raise Exception('Cannot modify \'' + filepath + '\': Does not exist')

        #Create temp file
        fh, abs_path = tempfile.mkstemp()
        with open(abs_path,'w') as new_file:
            with open(filepath) as old_file:
                for line in old_file:
                    # {BIN}
                    if '{BIN}' in line:
                        new_file.write(line.replace('{BIN}', binary))

                    else:
                        new_file.write(line)

        # Close file
        os.close(fh)

        #Remove original file
        os.remove(filepath)

        #Move new file
        shutil.move(abs_path, filepath)

        print('\t> Configured ' + os.path.basename(filepath))


class FileNamer:
    """
    Renames files with appropriate name
    """
    def __init__(self, configuration):
        """
        Sets configuration values and parses language config, if it exists
        """
        self.configuration = configuration

        self.rocket_directory = os.path.dirname(os.path.realpath(sys.argv[0]))
        language_file = self.rocket_directory + '/languages/' + self.configuration.language_name + '/language.json'

        self.language_configuration = LanguageConfiguration()
        self.language_configuration.Decode(language_file)

    def SpacesToUnderscores(self, word):
        """
        Converts spaces to lowercase underscores: 'Rocket Project' -> 'rocket_project'
        """
        return word.replace(' ', '_').lower()

    def SpacesToDashes(self, word):
        """
        Converts spaces to lowercase dashes: 'Rocket Project' -> 'rocket-project'
        """
        return word.replace(' ', '-').lower()

    def UnderscoresToCamelCase(self, word):
        """
        Converts lowercase underscores to CamelCase: 'rocket_project' -> 'RocketProject'
        """
        return ''.join(x.capitalize() or '_' for x in word.split('_'))

    def SpacesToCamelCase(self, word):
        """
        Converts spaces to CamelCase: 'Rocket Project' -> 'RocketProject'
        """
        return self.UnderscoresToCamelCase(self.SpacesToUnderscores(word))

    def GenerateName(self):
        """
        Generates a name for a file based on the project name and language type
        """
        # First try to pull from the $(ROCKET_DIR)/languages/*/language.json file
        if self.language_configuration.exists:
            # Naming options:
            #   'dashes' or 'dash': 'Rocket Project' -> 'rocket-project'
            #   'underscores' or 'underscore': 'Rocket Project' -> 'rocket_project'
            #   'camel-case' or 'camelcase' or 'camel_case': 'Rocket Project' -> 'RocketProject'
            naming = self.language_configuration.naming
            print('\t> Using naming: ' + naming)

            if naming == 'dashes' or naming == 'dash':
                self.name = self.SpacesToDashes(self.configuration.project)
                return

            elif naming == 'underscores' or naming == 'underscore':
                self.name = self.SpacesToUnderscores(self.configuration.project)
                return

            elif naming == 'camel-case' or naming == 'camelcase' or naming == 'camel_case':
                self.name = self.SpacesToCamelCase(self.configuration.project)
                return

            # If 'naming' attribute unrecognized, just break and use defaults below
            else:
                None;

        # Otherwise use defaults
        language = self.configuration.language

        # 'Rocket Project' -> 'rocket-project' for C
        if language == Language.c or language == Language.avr_c:
            self.name =  self.SpacesToDashes(self.configuration.project)
            print('\t> Defaulting to \'dashes\' naming for ' + self.configuration.language_string + ' projects')

        # 'Rocket Project' -> 'RocketProject' for C++
        elif language == Language.cpp or language == Language.avr_cpp:
            self.name = self.SpacesToCamelCase(self.configuration.project)
            print('\t> Defaulting to \'camel-case\' naming for ' + self.configuration.language_string + ' projects')

        # 'Rocket Project' -> 'rocket_project' for Python
        elif language == Language.python:
            self.name =  self.SpacesToUnderscores(self.configuration.project)
            print('\t> Defaulting to \'underscores\' naming for ' + self.configuration.language_string + ' projects')

        # 'Rocket Project' -> 'rocket_project' for all else
        else:
            self.name = self.SpacesToUnderscores(self.configuration.project)
            print('\t> Defaulting to \'underscores\' naming for ' + self.configuration.language_string + ' projects')

        return

    def Rename(self):
        """
        Rename the files according to the project name
        """
        # Generate a name
        self.GenerateName()
        print('\t> Name generated: ' + self.name)

        # Create file list
        self.files = []
        language = self.configuration.language
        sources = self.language_configuration.sources

        directory = os.getcwd()

        if language == Language.python:
            src_directory = directory + '/'
        else:
            src_directory = directory + '/src/'

        for f in os.listdir(src_directory):
            for s in sources:
                if f.endswith(s):
                    self.files.append(src_directory + f)

        # print('\t> Renaming the following files:')
        # for f in self.files:
        #     print('\t\t* ' + os.path.basename(f))

        # Rename all files
        self.renamed = []
        for f in self.files:
            self.renamed.append(self.RenameFile(f))

        # print('\t> to:')
        # for f in self.renamed:
        #     print('\t\t* ' + os.path.basename(f))

        return self.renamed

    def RenameFile(self, filepath):
        """
        Rename an individual file according to the project name
        """
        new_name = filepath.replace('rocket', self.name)

        if not self.language_configuration.extension:
            for s in self.language_configuration.sources:
                print('\t> Dropping \'' + s + '\' extension')
                new_name = new_name.replace(s, '')

        os.rename(filepath, new_name)

        return new_name

class Rocket:
    """
    Defines the Rocket object for creating project/code templates
    """
    def __init__(self):
        """
        Rocket default constructor
        """
        self.language = Language.unknown

    def Generate(self, language, project):
        """
        Generates the skeleton code, makefiles (if necessary), gitignore
        files, etc. and generates a default `config.json` object with the correct language
        """
        # Set language
        # - 'language' is the user's raw input
        # - 'lang' is a lowercase version of 'language'
        # - 'self.language' is the actual language type enum (e.g. Language.cpp)
        # - 'language_name' is the accepted language name by Rocket (e.g. 'C++' turn to 'cpp')
        lang = language.lower()
        if lang in LanguageDictionary:
            self.language = LanguageDictionary[lang]
            language_name = LanguageNameDictionary[lang]
        else:
            self.language = Language.unknown
            language_name = 'unknown'
            raise Exception('Unknown language')

        rocket_directory = os.path.dirname(os.path.realpath(sys.argv[0]))
        print('\t> Copying from Rocket directory: ' + rocket_directory)

        # Pull correct files and copy them to local directory
        directory = os.getcwd()
        print('\t> Current directory: ' + directory)

        # Write a default `config.json` file with the correct language
        # Read in the default file, change the language attribute, and write it
        self.configuration = Configuration()
        self.configuration.Modify(rocket_directory + '/config.json', directory + '/config.json', language_name, project)
        print('\t> Created default ' + language + ' configuration file \'./config.json\'')

        # @TODO Make this more modular by using the language's 'language.json' file and a LanguageConfiguration object
        # Make directories and copy files as needed for specific languages
        if (self.language == Language.c) or (self.language == Language.cpp) or (self.language == Language.avr_c) or (self.language == Language.avr_cpp):
            # Create necessary directories
            if not os.path.exists(directory + '/src/'):
                os.makedirs(directory + '/src/')
                print('\t> Created source directory \'./src/\'')

            # Copy the skeleton code
            if (self.language == Language.c) or (self.language == Language.avr_c):
                shutil.copy(rocket_directory + '/languages/' + language_name + '/skeleton/rocket.c', directory + '/src/')
                shutil.copy(rocket_directory + '/languages/' + language_name + '/skeleton/rocket.h', directory + '/src/')
                print('\t> Created skeleton \'.c\' and \'.h\' files in \'./src/\'')
            else:
                shutil.copy(rocket_directory + '/languages/' + language_name + '/skeleton/rocket.cpp', directory + '/src/')
                shutil.copy(rocket_directory + '/languages/' + language_name + '/skeleton/rocket.h', directory + '/src/')
                print('\t> Created skeleton \'.cpp\' and \'.h\' files in \'./src/\'')

            # Copy the makefile
            shutil.copy(rocket_directory + '/languages/' + language_name + '/makefile', directory)
            print('\t> Created ' + language + ' \'./makefile\'')

        elif self.language == Language.python:
            shutil.copy(rocket_directory + '/languages/' + language_name + '/skeleton/rocket.py', directory)
            print('\t> Created skeleton \'.py\' file')

    def Config(self):
        """
        Pull from the generated and (maybe) edited `config.json` file, and
        make changes to comment header blocks
        """
        # Create a configuration object
        self.configuration = Configuration()

        # Decode the configuration object
        self.configuration.Decode(os.getcwd() + '/config.json')

        if self.configuration.language_string in LanguageNameDictionary:
            language_name = LanguageNameDictionary[self.configuration.language_string]
        else:
            language_name = 'unknown'

        print('\t> Generated date: ' + self.configuration.date)
        print('\t> Detected language: ' + self.configuration.language_string)
        print('\t> Detected project name: ' + self.configuration.project)

        # Modify skeleton files/makefiles with data from `config.json`
        rocket_directory = os.path.dirname(os.path.realpath(sys.argv[0]))
        directory = os.getcwd()

        # Rename skeleton code files to project name
        file_namer = FileNamer(self.configuration)
        files = file_namer.Rename()

        # Modify skeleton code (and makefile if necessary)
        comment_filler = CommentFiller(self.configuration)
        comment_filler.Replace(files)

        makefile_filler = MakefileFiller(self.configuration)
        makefile_filler.Replace(directory + '/makefile', file_namer.name)

        # Re-apply executable privilages for Python scripts
        if self.configuration.language == Language.python:
            for f in files:
                os.chmod(f, stat.S_IRWXU)

        # If project will be a `git` repo add `.gitignore` and `README.md`
        if self.configuration.git:
            # Create README
            with open(directory + '/README.md', 'w') as readme:
                readme.write('# ' + self.configuration.project + '\n')
                readme.write(self.configuration.date + '\n')
                # @TODO Write license/other info here

            # Copy the `.gitignore`
            shutil.copy(rocket_directory + '/languages/' + language_name + '/' + language_name + '.gitignore', directory + '/.gitignore')
            print('\t> Created ' + self.configuration.language_string + ' \'./.gitignore\'')

            # Add executable name to .gitignore for non-Python projects
            if not self.configuration.language == Language.python:
                with open(directory + '/.gitignore', 'a') as gi:
                    gi.write('\n# Actual binary\n')
                    gi.write(file_namer.name)

            # Run `git init`
            out = subprocess.check_output("git init", shell=True, universal_newlines=True)
            print('\t> ' + str(out), end='')

        # Set `origin` and set to push refs
        if self.configuration.git_remote:
            try:
                out = subprocess.check_output('git remote add origin ' + self.configuration.git_remote, stderr=subprocess.STDOUT, shell=True, universal_newlines=True)

                try:
                    # Call this and discard output to ensure the remote was added properly
                    subprocess.check_output('git remote show origin', stderr=subprocess.STDOUT, shell=True, universal_newlines=True)

                    # Use this output (it is much cleaner) for displaying remote name
                    out = subprocess.check_output('git config --get remote.origin.url', shell=True, universal_newlines=True)
                    print('\t> git remote origin: ' + str(out), end='')

                    if self.configuration.git_push:
                        try:
                            # Add files
                            subprocess.check_output('git add .', shell=True, universal_newlines=True)

                            # Initial commit
                            subprocess.check_output('git commit -m \'Inital commit\'', shell=True, universal_newlines=True)

                            # Push
                            out = subprocess.check_output('git push -u origin master', stderr=subprocess.STDOUT, shell=True, universal_newlines=True)

                            print('\t> ' + str(out).replace('\n', '\n\t  '), end='')

                            # Show commit object hash
                            out = subprocess.check_output('git log --pretty=format:\'%h\' -n 1', shell=True, universal_newlines=True)

                            print('\n\t> Pushed initial commit ' + str(out).replace('\n', '...'))

                        except subprocess.CalledProcessError as e:
                            print('\t! Unable to push initial commit:\n\t  ' + e.output.replace('\n', '\n\t  '))

                except subprocess.CalledProcessError as e:
                    print('\t! Error getting remote:\n\t  ' + e.output.replace('\n', '\n\t  '))

            except subprocess.CalledProcessError as e:
                print('\t! Error adding remote: ' + e.output, end='')
                print('\t! Try running \'rm -rf .git/; rocket config\' to REMOVE ALL GIT FILES and re-configure')
        else:
            if self.configuration.git_push:
                print('\t* Warning: You configured to \'push\' the git repo but you did not provide a valid repo...')

    def Clean(self):
        """
        Remove generated project files in the current directory
        """
        rocket_directory = os.path.dirname(os.path.realpath(sys.argv[0]))
        directory = os.getcwd()

        # Make sure user knows exactly which directory they are in
        response = input('Remove all project files in \'' + directory + '\'? [Y/n]: ')
        if not response == 'Y':
            return 1

        # Have at least *some* sanity check...
        if directory == rocket_directory:
            raise Exception('Removing here would remove Rocket\'s files...')
        elif directory == '/':
            raise Exception('You do not really want to remove \'' + directory + '\', right...?')
        elif directory == '/usr':
            raise Exception('You do not really want to remove \'' + directory + '\', right...?')
        elif directory == os.path.expanduser('~'):
            raise Exception('You do not really want to remove \'' + directory + '\', right...?')

        # Can use the `config.json` to more intelligently remove files if it exists
        if os.path.exists(directory + '/config.json'):
            configuration = Configuration()
            configuration.Decode(directory + '/config.json')
            configuration.Print()

        # @TODO Add 'files' attribute to 'config.json' when generating as files are added and only use that! Do not do any blind removal

        # @TODO How to handle '.gitignore' and '.git/'?

        # Else do blind removal of *.py, config.json, makefile, .gitignore, ./.git/, ./src/, ./obj/, ./bin/, {Executable}, etc.
        # else:
        #     os.remove(glob(directory + '/*.py'))
        #     os.remove(directory + '/config.json')
        #     os.remove(directory + '/makefile')
        #     os.remove(directory + '/.gitignore')
        #     shutil.rmtree(directory + '/.git/')
        #     shutil.rmtree(directory + '/src/')
        #     shutil.rmtree(directory + '/obj/')
        #     shutil.rmtree(directory + '/bin/')

        return 0

    def Print(self):
        """
        Prints the configuration data in a nice format
        """
        self.configuration.Print()

def main():
    """
    Rocket main
    """
    global args

    print('-------')
    print('Rocket!')
    print('-------')

    # Make sure Rocket is not being executed in the install directory
    if os.getcwd() == os.path.dirname(os.path.realpath(sys.argv[0])):
        raise Exception('You do not want to execute \'rocket\' in it\'s own directory...')

    # Execute command
    if args.command == 'clean':
        directory = os.getcwd()
        print('\n>>> Removing existing project files >>>')
        rocket = Rocket()
        if not rocket.Clean():
            print('<<< Project files removed <<<\n')

    elif args.command == 'create':
        print('\n>>> Generating a blank ' + args.language + ' project named \'' + args.project + '\' >>>')

        path, dirname = os.path.split(os.getcwd())

        # Directory already has project name
        if args.project == dirname:
            #Non-empty named directory: Prompt user
            if os.listdir(os.getcwd()):
                if not input('You really should run \'rocket create\' in an empty directory... Continue? [Y/n] ') == 'Y':
                    return 0

        # Directory has different name
        else:
            # Make directory named after project and enter it
            os.makedirs(args.project)
            os.chdir(args.project)
            print('\t> Created project directory: \'' + os.path.dirname(os.getcwd() + '/') + '\'')

        rocket = Rocket()
        rocket.Generate(args.language, args.project)
        print('<<< Generated skeleton ' + args.language + ' project <<<')
        print('<<< Edit the \'config.json\' file with your project settings and run \'rocket config\' to finish <<<\n')

    elif args.command == 'config':
        rocket = Rocket()
        print('\n>>> Configuring the project >>>')
        rocket.Config()
        print('<<< Configured \'' + rocket.configuration.project + '\' <<<\n')

    else:
        raise Exception('Must specify language with \'-l LANGUAGE\' or run config with \'-c\' or \'--config\'')

if __name__ == '__main__':
    try:
        start_time = time.time()

        parser = argparse.ArgumentParser(prog='rocket', description='generate a base project in C, C++, or Python')

        # Options
        parser.add_argument('-v', '--verbose', action='store_true', default=False, help='verbose mode')

        # Commands
        subparsers = parser.add_subparsers(help='commands:', dest='command')

        create_parser = subparsers.add_parser('create', help='create a new project')
        create_parser.add_argument('project', help='project name')
        create_parser.add_argument('language', type=str.lower, help='project language', choices=['c', 'c++', 'cpp', 'python'])

        config_parser = subparsers.add_parser('config', help='configure a project')

        clean_parser  = subparsers.add_parser('clean', help='remove all project files')

        args = parser.parse_args()

        main()
        if args.verbose: print('\n' + time.asctime())
        if args.verbose: print('Total Runtime: ', end='')
        if args.verbose: print(str((time.time() - start_time) * 1000) + ' ms')
        sys.exit(0)
    except KeyboardInterrupt as e: # Ctrl-C
        raise e
    except SystemExit as e: # sys.exit()
        raise e
    except Exception as e:
        print('\n<-- Exception: ', end='')
        print(str(e), end=' -->\n\n')
        if(args.verbose):
            traceback.print_exc()

        os._exit(1)
